/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visao;
import dao.CategoriaDAO;
import java.util.List;
import produtos.Produto;
import javax.swing.JOptionPane;
import produtos.Categoria;

/**
 *
 * @author Gabriel
 */
public class CadastroProduto extends javax.swing.JFrame {
    private Produto objpro;
    private Categoria objcat;
    private String user;
    private String password;
    private CategoriaDAO dao;
    
    public CadastroProduto(String user, String password) {
        initComponents();
        this.user = user;
        this.password = password;
        this.objpro = new Produto(user, password);
        this.objcat = new Categoria(user, password);
        carregarCategorias();   
    }
    
    private void carregarCategorias() {
    // Ajuste “root” e “admin” para as credenciais do seu BD
    dao = new CategoriaDAO(user, password);
    List<String> lista = dao.listarCategorias();

    // Limpa tudo que já estiver no JComboBox (se houver)
    TextCategoria.removeAllItems();
    // (Opcional) adiciona um item inicial
    TextCategoria.addItem("Selecione");

    // Para cada nome de categoria retornado, adiciona no combo
    for (String nomeCat : lista) {
        TextCategoria.addItem(nomeCat);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Nome = new javax.swing.JLabel();
        TextNome = new javax.swing.JTextField();
        Preco = new javax.swing.JLabel();
        Estoque = new javax.swing.JLabel();
        Minimo = new javax.swing.JLabel();
        Maximo = new javax.swing.JLabel();
        Unidade = new javax.swing.JLabel();
        Categoria = new javax.swing.JLabel();
        TextPreco = new javax.swing.JFormattedTextField();
        TextEstoque = new javax.swing.JTextField();
        TextMinimo = new javax.swing.JTextField();
        TextMaximo = new javax.swing.JTextField();
        TextCategoria = new javax.swing.JComboBox<>();
        Salvar = new javax.swing.JButton();
        Cancelar = new javax.swing.JButton();
        TextUnidade = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Produtos");
        setResizable(false);

        Nome.setText("Nome do Produto:");

        TextNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextNomeActionPerformed(evt);
            }
        });

        Preco.setText("Preço Unitário");

        Estoque.setText("Quantidade Estoque");

        Minimo.setText("Quantidade Mínima");

        Maximo.setText("Quantidade Máxima");

        Unidade.setText("Unidade");

        Categoria.setText("Categoria");

        TextCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "\"Selecione...\"", "Item 1", "Item 2" }));

        Salvar.setText("Salvar");
        Salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarActionPerformed(evt);
            }
        });

        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Preco)
                            .addComponent(Unidade)
                            .addComponent(Nome)
                            .addComponent(Estoque)
                            .addComponent(Minimo)
                            .addComponent(Maximo)
                            .addComponent(Categoria))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TextPreco, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(TextEstoque)
                            .addComponent(TextMinimo)
                            .addComponent(TextMaximo)
                            .addComponent(TextCategoria, 0, 275, Short.MAX_VALUE)
                            .addComponent(TextUnidade))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Salvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Cancelar)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(TextNome, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {TextCategoria, TextPreco});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Nome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Preco)
                    .addComponent(TextPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Unidade)
                    .addComponent(TextUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Estoque)
                    .addComponent(TextEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Minimo)
                    .addComponent(TextMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Maximo)
                    .addComponent(TextMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Categoria)
                    .addComponent(TextCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Salvar)
                    .addComponent(Cancelar))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextNomeActionPerformed

    private void SalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarActionPerformed
 try {
    String nome = "";
    double preco = 0;
    String unidade = "";
    int quantidade_estoque = 0;
    int estoque_minimo = 0;
    int estoque_maximo = 0;
    String categoria = "";  // Categoria do produto
    int id_categoria = 0; 
    String nome_categoria = "";
    String tamanho = ""; 
    String embalagem = "";

    // Validação do nome
    if (this.TextNome.getText().trim().length() < 2) {
        throw new Exception("Nome do produto deve conter ao menos 2 caracteres.");
    } else {
        nome = this.TextNome.getText().trim();
    }

    // Conversão e validação do preço
    try {
        preco = Double.parseDouble(this.TextPreco.getText().trim().replace(",", "."));
    } catch (NumberFormatException e) {
        throw new Exception("Preço inválido. Use ponto ou vírgula corretamente.");
    }

    // Conversão e validação do estoque
    try {
        quantidade_estoque = Integer.parseInt(this.TextEstoque.getText().trim());
    } catch (NumberFormatException e) {
        throw new Exception("Quantidade em estoque inválida.");
    }

    try {
        estoque_minimo = Integer.parseInt(this.TextMinimo.getText().trim());
    } catch (NumberFormatException e) {
        throw new Exception("Estoque mínimo inválido.");
    }

    try {
        estoque_maximo = Integer.parseInt(this.TextMaximo.getText().trim());
    } catch (NumberFormatException e) {
        throw new Exception("Estoque máximo inválido.");
    }

    // Validação da unidade
    if (this.TextUnidade.getText().trim().isEmpty()) {
        throw new Exception("Informe a unidade do produto.");
    } else {
        unidade = this.TextUnidade.getText().trim();
    }

    // Validação da categoria do produto
    categoria = this.TextCategoria.getSelectedItem().toString();
    if (categoria.equals("Selecione") || categoria.trim().isEmpty()) {
        throw new Exception("Selecione uma categoria válida para o produto.");
    }
    
    id_categoria = dao.BuscarId(categoria);

    // Chamada do método para inserir produto (ajuste conforme sua DAO)
    boolean sucesso = objpro.insertProduto(
               nome, 
              preco,unidade, 
              quantidade_estoque, 
              estoque_minimo, 
              estoque_maximo,
              id_categoria, 
              nome_categoria, 
              tamanho, 
              embalagem,
              user, 
              password);

    if (sucesso) {
        JOptionPane.showMessageDialog(null, "Produto salvo com sucesso!");

        // Limpa os campos após salvar
        this.TextNome.setText("");
        this.TextPreco.setText("");
        this.TextEstoque.setText("");
        this.TextMinimo.setText("");
        this.TextMaximo.setText("");
        this.TextUnidade.setText("");
        this.TextCategoria.setSelectedIndex(0);
    } else {
        JOptionPane.showMessageDialog(null, "Erro ao salvar o produto no banco de dados.");
    }

} catch (Exception erro) {
    JOptionPane.showMessageDialog(null, erro.getMessage());
}
        // TODO add your handling code here:
    }//GEN-LAST:event_SalvarActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_CancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
 String user = JOptionPane.showInputDialog(null, "Digite o nome de usuário do banco de dados:", "Login", JOptionPane.QUESTION_MESSAGE);
        String password = JOptionPane.showInputDialog(null, "Digite a senha do banco de dados:", "Login", JOptionPane.QUESTION_MESSAGE);

        if (user == null || password == null || user.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Usuário e senha são obrigatórios.", "Erro", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroProduto(user, password).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancelar;
    private javax.swing.JLabel Categoria;
    private javax.swing.JLabel Estoque;
    private javax.swing.JLabel Maximo;
    private javax.swing.JLabel Minimo;
    private javax.swing.JLabel Nome;
    private javax.swing.JLabel Preco;
    private javax.swing.JButton Salvar;
    private javax.swing.JComboBox<String> TextCategoria;
    private javax.swing.JTextField TextEstoque;
    private javax.swing.JTextField TextMaximo;
    private javax.swing.JTextField TextMinimo;
    private javax.swing.JTextField TextNome;
    private javax.swing.JFormattedTextField TextPreco;
    private javax.swing.JTextField TextUnidade;
    private javax.swing.JLabel Unidade;
    // End of variables declaration//GEN-END:variables
}
